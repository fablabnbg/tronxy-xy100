--- /usr/lib/cura/plugins/USBPrinting/USBPrinterOutputDevice.py.orig	2017-04-17 18:20:25.435827323 +0200
+++ /usr/lib/cura/plugins/USBPrinting/USBPrinterOutputDevice.py	2017-04-17 23:42:59.761604710 +0200
@@ -516,7 +516,10 @@
                         line = b""  # Force getting temperature as keep alive
                     else:
                         self._sendNextGcodeLine()
-                elif b"resend" in line.lower() or b"rs" in line:  # Because a resend can be asked with "resend" and "rs"
+                elif b"resend:" in line.lower() or b"rs:" in line:  # Because a resend can be asked with "resend" and "rs"
+                    # Must include the colons, to avoid an 'rs' substring mismatch.
+                    # The final statistics with '.. XX hours , YY min ..' would cause havoc.
+                    Logger.log("i", "RESEND: " + str(line))
                     try:
                         self._gcode_position = int(line.replace(b"N:",b" ").replace(b"N",b" ").replace(b":",b" ").split()[-1])
                     except:
@@ -547,16 +550,28 @@
         try:
             if line == "M0" or line == "M1":
                 line = "M105"  # Don't send the M0 or M1 to the machine, as M0 and M1 are handled as an LCD menu pause.
+            if line == "":
+                perc = int(0.9 + self._gcode_position) * 100 / len(self._gcode)
+                if perc >= 99:
+                  line = "M117 USB print done."
+                else:
+                  line = "M117 USB print %d/100" % perc
+                Logger.log("i", "'' -> '" + line + "'")
             if ("G0" in line or "G1" in line) and "Z" in line:
-                z = float(re.search("Z([0-9\.]*)", line).group(1))
+                z = float(re.search("Z([0-9\.]+)", line).group(1))
                 if self._current_z != z:
                     self._current_z = z
         except Exception as e:
             Logger.log("e", "Unexpected error with printer connection: %s" % e)
             self._setErrorState("Unexpected error: %s" %e)
-        checksum = functools.reduce(lambda x,y: x^y, map(ord, "N%d%s" % (self._gcode_position, line)))
 
-        self._sendCommand("N%d%s*%d" % (self._gcode_position, line, checksum))
+        ## Don't apply checksum with TRONXY XY100
+        ## When checksumming is on, we see erratic movememts along the Y axis.
+        # checksum = functools.reduce(lambda x,y: x^y, map(ord, "N%d%s" % (self._gcode_position, line)))
+        # Logger.log("i",   "N%d%s*%d" % (self._gcode_position, line, checksum))
+        # self._sendCommand("N%d%s*%d" % (self._gcode_position, line, checksum))
+        Logger.log("i",   "N%d%s" % (self._gcode_position, line))
+        self._sendCommand("N%d%s" % (self._gcode_position, line))
         self._gcode_position += 1
         self.setProgress((self._gcode_position / len(self._gcode)) * 100)
         self.progressChanged.emit()
